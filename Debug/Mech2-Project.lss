
Mech2-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000b50  00000be4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800108  00800108  00000bec  2**0
                  ALLOC
  3 .stab         00001284  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000972  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 02 	call	0x4ec	; 0x4ec <main>
  9e:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delay_ms>:
 *  Created on: 7. feb. 2018
 *      Author: Gylfi
 */

void delay_ms (unsigned int uimS )
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2a 97       	sbiw	r28, 0x0a	; 10
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
  ba:	9a 87       	std	Y+10, r25	; 0x0a
  bc:	89 87       	std	Y+9, r24	; 0x09
	unsigned volatile long ulMax , ulCount ;
	ulMax = 380 * uimS ;
  be:	29 85       	ldd	r18, Y+9	; 0x09
  c0:	3a 85       	ldd	r19, Y+10	; 0x0a
  c2:	8c e7       	ldi	r24, 0x7C	; 124
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	ac 01       	movw	r20, r24
  c8:	24 9f       	mul	r18, r20
  ca:	c0 01       	movw	r24, r0
  cc:	25 9f       	mul	r18, r21
  ce:	90 0d       	add	r25, r0
  d0:	34 9f       	mul	r19, r20
  d2:	90 0d       	add	r25, r0
  d4:	11 24       	eor	r1, r1
  d6:	cc 01       	movw	r24, r24
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	89 83       	std	Y+1, r24	; 0x01
  de:	9a 83       	std	Y+2, r25	; 0x02
  e0:	ab 83       	std	Y+3, r26	; 0x03
  e2:	bc 83       	std	Y+4, r27	; 0x04
	ulCount =0;
  e4:	1d 82       	std	Y+5, r1	; 0x05
  e6:	1e 82       	std	Y+6, r1	; 0x06
  e8:	1f 82       	std	Y+7, r1	; 0x07
  ea:	18 86       	std	Y+8, r1	; 0x08
  ec:	0b c0       	rjmp	.+22     	; 0x104 <delay_ms+0x5e>
	while ( ulCount != ulMax ) {
		ulCount++;
  ee:	8d 81       	ldd	r24, Y+5	; 0x05
  f0:	9e 81       	ldd	r25, Y+6	; 0x06
  f2:	af 81       	ldd	r26, Y+7	; 0x07
  f4:	b8 85       	ldd	r27, Y+8	; 0x08
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	a1 1d       	adc	r26, r1
  fa:	b1 1d       	adc	r27, r1
  fc:	8d 83       	std	Y+5, r24	; 0x05
  fe:	9e 83       	std	Y+6, r25	; 0x06
 100:	af 83       	std	Y+7, r26	; 0x07
 102:	b8 87       	std	Y+8, r27	; 0x08
void delay_ms (unsigned int uimS )
{
	unsigned volatile long ulMax , ulCount ;
	ulMax = 380 * uimS ;
	ulCount =0;
	while ( ulCount != ulMax ) {
 104:	2d 81       	ldd	r18, Y+5	; 0x05
 106:	3e 81       	ldd	r19, Y+6	; 0x06
 108:	4f 81       	ldd	r20, Y+7	; 0x07
 10a:	58 85       	ldd	r21, Y+8	; 0x08
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	9a 81       	ldd	r25, Y+2	; 0x02
 110:	ab 81       	ldd	r26, Y+3	; 0x03
 112:	bc 81       	ldd	r27, Y+4	; 0x04
 114:	28 17       	cp	r18, r24
 116:	39 07       	cpc	r19, r25
 118:	4a 07       	cpc	r20, r26
 11a:	5b 07       	cpc	r21, r27
 11c:	41 f7       	brne	.-48     	; 0xee <delay_ms+0x48>
		ulCount++;
	}
}
 11e:	2a 96       	adiw	r28, 0x0a	; 10
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	cf 91       	pop	r28
 12c:	df 91       	pop	r29
 12e:	08 95       	ret

00000130 <delay_s>:

void delay_s (unsigned int uiS )
{
 130:	df 93       	push	r29
 132:	cf 93       	push	r28
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	2a 97       	sbiw	r28, 0x0a	; 10
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	9a 87       	std	Y+10, r25	; 0x0a
 146:	89 87       	std	Y+9, r24	; 0x09
	unsigned volatile long ulMax , ulCount ;
	ulMax = 380000 * uiS ;
 148:	89 85       	ldd	r24, Y+9	; 0x09
 14a:	9a 85       	ldd	r25, Y+10	; 0x0a
 14c:	cc 01       	movw	r24, r24
 14e:	a0 e0       	ldi	r26, 0x00	; 0
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	20 e6       	ldi	r18, 0x60	; 96
 154:	3c ec       	ldi	r19, 0xCC	; 204
 156:	45 e0       	ldi	r20, 0x05	; 5
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	bc 01       	movw	r22, r24
 15c:	cd 01       	movw	r24, r26
 15e:	0e 94 73 05 	call	0xae6	; 0xae6 <__mulsi3>
 162:	dc 01       	movw	r26, r24
 164:	cb 01       	movw	r24, r22
 166:	89 83       	std	Y+1, r24	; 0x01
 168:	9a 83       	std	Y+2, r25	; 0x02
 16a:	ab 83       	std	Y+3, r26	; 0x03
 16c:	bc 83       	std	Y+4, r27	; 0x04
	ulCount =0;
 16e:	1d 82       	std	Y+5, r1	; 0x05
 170:	1e 82       	std	Y+6, r1	; 0x06
 172:	1f 82       	std	Y+7, r1	; 0x07
 174:	18 86       	std	Y+8, r1	; 0x08
 176:	0b c0       	rjmp	.+22     	; 0x18e <delay_s+0x5e>
	while ( ulCount != ulMax ) {
		ulCount++;
 178:	8d 81       	ldd	r24, Y+5	; 0x05
 17a:	9e 81       	ldd	r25, Y+6	; 0x06
 17c:	af 81       	ldd	r26, Y+7	; 0x07
 17e:	b8 85       	ldd	r27, Y+8	; 0x08
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	a1 1d       	adc	r26, r1
 184:	b1 1d       	adc	r27, r1
 186:	8d 83       	std	Y+5, r24	; 0x05
 188:	9e 83       	std	Y+6, r25	; 0x06
 18a:	af 83       	std	Y+7, r26	; 0x07
 18c:	b8 87       	std	Y+8, r27	; 0x08
void delay_s (unsigned int uiS )
{
	unsigned volatile long ulMax , ulCount ;
	ulMax = 380000 * uiS ;
	ulCount =0;
	while ( ulCount != ulMax ) {
 18e:	2d 81       	ldd	r18, Y+5	; 0x05
 190:	3e 81       	ldd	r19, Y+6	; 0x06
 192:	4f 81       	ldd	r20, Y+7	; 0x07
 194:	58 85       	ldd	r21, Y+8	; 0x08
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	9a 81       	ldd	r25, Y+2	; 0x02
 19a:	ab 81       	ldd	r26, Y+3	; 0x03
 19c:	bc 81       	ldd	r27, Y+4	; 0x04
 19e:	28 17       	cp	r18, r24
 1a0:	39 07       	cpc	r19, r25
 1a2:	4a 07       	cpc	r20, r26
 1a4:	5b 07       	cpc	r21, r27
 1a6:	41 f7       	brne	.-48     	; 0x178 <delay_s+0x48>
		ulCount++;
	}
}
 1a8:	2a 96       	adiw	r28, 0x0a	; 10
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	cf 91       	pop	r28
 1b6:	df 91       	pop	r29
 1b8:	08 95       	ret

000001ba <delay_us>:

void delay_us (unsigned int uiuS )
{
 1ba:	df 93       	push	r29
 1bc:	cf 93       	push	r28
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	2a 97       	sbiw	r28, 0x0a	; 10
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
 1ce:	9a 87       	std	Y+10, r25	; 0x0a
 1d0:	89 87       	std	Y+9, r24	; 0x09
	unsigned volatile long ulMax , ulCount ;
	ulMax = 38 * uiuS ;
 1d2:	29 85       	ldd	r18, Y+9	; 0x09
 1d4:	3a 85       	ldd	r19, Y+10	; 0x0a
 1d6:	86 e2       	ldi	r24, 0x26	; 38
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	24 9f       	mul	r18, r20
 1de:	c0 01       	movw	r24, r0
 1e0:	25 9f       	mul	r18, r21
 1e2:	90 0d       	add	r25, r0
 1e4:	34 9f       	mul	r19, r20
 1e6:	90 0d       	add	r25, r0
 1e8:	11 24       	eor	r1, r1
 1ea:	cc 01       	movw	r24, r24
 1ec:	a0 e0       	ldi	r26, 0x00	; 0
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	ab 83       	std	Y+3, r26	; 0x03
 1f6:	bc 83       	std	Y+4, r27	; 0x04
	ulCount =0;
 1f8:	1d 82       	std	Y+5, r1	; 0x05
 1fa:	1e 82       	std	Y+6, r1	; 0x06
 1fc:	1f 82       	std	Y+7, r1	; 0x07
 1fe:	18 86       	std	Y+8, r1	; 0x08
 200:	0b c0       	rjmp	.+22     	; 0x218 <delay_us+0x5e>
	while ( ulCount != ulMax ) {
		ulCount++;
 202:	8d 81       	ldd	r24, Y+5	; 0x05
 204:	9e 81       	ldd	r25, Y+6	; 0x06
 206:	af 81       	ldd	r26, Y+7	; 0x07
 208:	b8 85       	ldd	r27, Y+8	; 0x08
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	a1 1d       	adc	r26, r1
 20e:	b1 1d       	adc	r27, r1
 210:	8d 83       	std	Y+5, r24	; 0x05
 212:	9e 83       	std	Y+6, r25	; 0x06
 214:	af 83       	std	Y+7, r26	; 0x07
 216:	b8 87       	std	Y+8, r27	; 0x08
void delay_us (unsigned int uiuS )
{
	unsigned volatile long ulMax , ulCount ;
	ulMax = 38 * uiuS ;
	ulCount =0;
	while ( ulCount != ulMax ) {
 218:	2d 81       	ldd	r18, Y+5	; 0x05
 21a:	3e 81       	ldd	r19, Y+6	; 0x06
 21c:	4f 81       	ldd	r20, Y+7	; 0x07
 21e:	58 85       	ldd	r21, Y+8	; 0x08
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	9a 81       	ldd	r25, Y+2	; 0x02
 224:	ab 81       	ldd	r26, Y+3	; 0x03
 226:	bc 81       	ldd	r27, Y+4	; 0x04
 228:	28 17       	cp	r18, r24
 22a:	39 07       	cpc	r19, r25
 22c:	4a 07       	cpc	r20, r26
 22e:	5b 07       	cpc	r21, r27
 230:	41 f7       	brne	.-48     	; 0x202 <delay_us+0x48>
		ulCount++;
	}
}
 232:	2a 96       	adiw	r28, 0x0a	; 10
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
 23e:	cf 91       	pop	r28
 240:	df 91       	pop	r29
 242:	08 95       	ret

00000244 <__vector_16>:
int state = 0;
int trained = 0;
int best_sequence[4] = {1,2,3,0};

ISR (TIMER0_OVF_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
 256:	df 93       	push	r29
 258:	cf 93       	push	r28
 25a:	00 d0       	rcall	.+0      	; 0x25c <__vector_16+0x18>
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
	switch(walker)
 260:	80 91 08 01 	lds	r24, 0x0108
 264:	90 91 09 01 	lds	r25, 0x0109
 268:	9a 83       	std	Y+2, r25	; 0x02
 26a:	89 83       	std	Y+1, r24	; 0x01
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	9a 81       	ldd	r25, Y+2	; 0x02
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	91 05       	cpc	r25, r1
 274:	d1 f0       	breq	.+52     	; 0x2aa <__vector_16+0x66>
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	91 05       	cpc	r25, r1
 27e:	2c f4       	brge	.+10     	; 0x28a <__vector_16+0x46>
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	9a 81       	ldd	r25, Y+2	; 0x02
 284:	00 97       	sbiw	r24, 0x00	; 0
 286:	61 f0       	breq	.+24     	; 0x2a0 <__vector_16+0x5c>
 288:	1e c0       	rjmp	.+60     	; 0x2c6 <__vector_16+0x82>
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	9a 81       	ldd	r25, Y+2	; 0x02
 28e:	82 30       	cpi	r24, 0x02	; 2
 290:	91 05       	cpc	r25, r1
 292:	81 f0       	breq	.+32     	; 0x2b4 <__vector_16+0x70>
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	9a 81       	ldd	r25, Y+2	; 0x02
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	91 05       	cpc	r25, r1
 29c:	81 f0       	breq	.+32     	; 0x2be <__vector_16+0x7a>
 29e:	13 c0       	rjmp	.+38     	; 0x2c6 <__vector_16+0x82>
	{
	case 0:
		PORTB = 0b100000;
 2a0:	e5 e2       	ldi	r30, 0x25	; 37
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 e2       	ldi	r24, 0x20	; 32
 2a6:	80 83       	st	Z, r24
 2a8:	0e c0       	rjmp	.+28     	; 0x2c6 <__vector_16+0x82>
		break;
	case 1:
		PORTB = 0b010000;
 2aa:	e5 e2       	ldi	r30, 0x25	; 37
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 e1       	ldi	r24, 0x10	; 16
 2b0:	80 83       	st	Z, r24
 2b2:	09 c0       	rjmp	.+18     	; 0x2c6 <__vector_16+0x82>
		break;
	case 2:
		PORTB = 0b001000;
 2b4:	e5 e2       	ldi	r30, 0x25	; 37
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	88 e0       	ldi	r24, 0x08	; 8
 2ba:	80 83       	st	Z, r24
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <__vector_16+0x82>
		break;
	case 3:
		PORTB = 0b000100;
 2be:	e5 e2       	ldi	r30, 0x25	; 37
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	84 e0       	ldi	r24, 0x04	; 4
 2c4:	80 83       	st	Z, r24
		break;
	}
}
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	cf 91       	pop	r28
 2cc:	df 91       	pop	r29
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
 2ee:	df 93       	push	r29
 2f0:	cf 93       	push	r28
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x00;
 2f6:	e5 e2       	ldi	r30, 0x25	; 37
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	10 82       	st	Z, r1
}
 2fc:	cf 91       	pop	r28
 2fe:	df 91       	pop	r29
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <__vector_3>:

ISR(PCINT0_vect)
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	8f 93       	push	r24
 31a:	9f 93       	push	r25
 31c:	df 93       	push	r29
 31e:	cf 93       	push	r28
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
	trained = 1;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	90 93 0d 01 	sts	0x010D, r25
 32c:	80 93 0c 01 	sts	0x010C, r24
	best_sequence[0] = 1;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	90 93 01 01 	sts	0x0101, r25
 338:	80 93 00 01 	sts	0x0100, r24
	best_sequence[1] = 2;
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	90 93 03 01 	sts	0x0103, r25
 344:	80 93 02 01 	sts	0x0102, r24
	best_sequence[2] = 3;
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	90 93 05 01 	sts	0x0105, r25
 350:	80 93 04 01 	sts	0x0104, r24
	best_sequence[3] = 0;
 354:	10 92 07 01 	sts	0x0107, r1
 358:	10 92 06 01 	sts	0x0106, r1
}
 35c:	cf 91       	pop	r28
 35e:	df 91       	pop	r29
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <ANN>:
 * This is not an ANN!!!
 * The function just returns an array of all permutations of a 4-digit number
 * each digit goes from 0-3
 */
void ANN(int *walker_num[])
{
 36e:	df 93       	push	r29
 370:	cf 93       	push	r28
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	2c 97       	sbiw	r28, 0x0c	; 12
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
 382:	9c 87       	std	Y+12, r25	; 0x0c
 384:	8b 87       	std	Y+11, r24	; 0x0b
    int i,j,k,l;
    int counter = 0;
 386:	1a 82       	std	Y+2, r1	; 0x02
 388:	19 82       	std	Y+1, r1	; 0x01
    for(i = 0; i < LEG_NUM; i++)
 38a:	1a 86       	std	Y+10, r1	; 0x0a
 38c:	19 86       	std	Y+9, r1	; 0x09
 38e:	9f c0       	rjmp	.+318    	; 0x4ce <ANN+0x160>
    {
        for(j = 0; j < LEG_NUM; j++)
 390:	18 86       	std	Y+8, r1	; 0x08
 392:	1f 82       	std	Y+7, r1	; 0x07
 394:	91 c0       	rjmp	.+290    	; 0x4b8 <ANN+0x14a>
        {
            for(k = 0; k < LEG_NUM; k++)
 396:	1e 82       	std	Y+6, r1	; 0x06
 398:	1d 82       	std	Y+5, r1	; 0x05
 39a:	83 c0       	rjmp	.+262    	; 0x4a2 <ANN+0x134>
            {
                for(l = 0; l < LEG_NUM; l ++)
 39c:	1c 82       	std	Y+4, r1	; 0x04
 39e:	1b 82       	std	Y+3, r1	; 0x03
 3a0:	75 c0       	rjmp	.+234    	; 0x48c <ANN+0x11e>
                {
                    if(!(i==j || i==k || i==l || j==k || j==l || k==l))
 3a2:	29 85       	ldd	r18, Y+9	; 0x09
 3a4:	3a 85       	ldd	r19, Y+10	; 0x0a
 3a6:	8f 81       	ldd	r24, Y+7	; 0x07
 3a8:	98 85       	ldd	r25, Y+8	; 0x08
 3aa:	28 17       	cp	r18, r24
 3ac:	39 07       	cpc	r19, r25
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <ANN+0x44>
 3b0:	68 c0       	rjmp	.+208    	; 0x482 <ANN+0x114>
 3b2:	29 85       	ldd	r18, Y+9	; 0x09
 3b4:	3a 85       	ldd	r19, Y+10	; 0x0a
 3b6:	8d 81       	ldd	r24, Y+5	; 0x05
 3b8:	9e 81       	ldd	r25, Y+6	; 0x06
 3ba:	28 17       	cp	r18, r24
 3bc:	39 07       	cpc	r19, r25
 3be:	09 f4       	brne	.+2      	; 0x3c2 <ANN+0x54>
 3c0:	60 c0       	rjmp	.+192    	; 0x482 <ANN+0x114>
 3c2:	29 85       	ldd	r18, Y+9	; 0x09
 3c4:	3a 85       	ldd	r19, Y+10	; 0x0a
 3c6:	8b 81       	ldd	r24, Y+3	; 0x03
 3c8:	9c 81       	ldd	r25, Y+4	; 0x04
 3ca:	28 17       	cp	r18, r24
 3cc:	39 07       	cpc	r19, r25
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <ANN+0x64>
 3d0:	58 c0       	rjmp	.+176    	; 0x482 <ANN+0x114>
 3d2:	2f 81       	ldd	r18, Y+7	; 0x07
 3d4:	38 85       	ldd	r19, Y+8	; 0x08
 3d6:	8d 81       	ldd	r24, Y+5	; 0x05
 3d8:	9e 81       	ldd	r25, Y+6	; 0x06
 3da:	28 17       	cp	r18, r24
 3dc:	39 07       	cpc	r19, r25
 3de:	09 f4       	brne	.+2      	; 0x3e2 <ANN+0x74>
 3e0:	50 c0       	rjmp	.+160    	; 0x482 <ANN+0x114>
 3e2:	2f 81       	ldd	r18, Y+7	; 0x07
 3e4:	38 85       	ldd	r19, Y+8	; 0x08
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	9c 81       	ldd	r25, Y+4	; 0x04
 3ea:	28 17       	cp	r18, r24
 3ec:	39 07       	cpc	r19, r25
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <ANN+0x84>
 3f0:	48 c0       	rjmp	.+144    	; 0x482 <ANN+0x114>
 3f2:	2d 81       	ldd	r18, Y+5	; 0x05
 3f4:	3e 81       	ldd	r19, Y+6	; 0x06
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
 3f8:	9c 81       	ldd	r25, Y+4	; 0x04
 3fa:	28 17       	cp	r18, r24
 3fc:	39 07       	cpc	r19, r25
 3fe:	09 f4       	brne	.+2      	; 0x402 <ANN+0x94>
 400:	40 c0       	rjmp	.+128    	; 0x482 <ANN+0x114>
                    {
                        walker_num[counter] = i;
 402:	89 81       	ldd	r24, Y+1	; 0x01
 404:	9a 81       	ldd	r25, Y+2	; 0x02
 406:	9c 01       	movw	r18, r24
 408:	22 0f       	add	r18, r18
 40a:	33 1f       	adc	r19, r19
 40c:	8b 85       	ldd	r24, Y+11	; 0x0b
 40e:	9c 85       	ldd	r25, Y+12	; 0x0c
 410:	fc 01       	movw	r30, r24
 412:	e2 0f       	add	r30, r18
 414:	f3 1f       	adc	r31, r19
 416:	89 85       	ldd	r24, Y+9	; 0x09
 418:	9a 85       	ldd	r25, Y+10	; 0x0a
 41a:	91 83       	std	Z+1, r25	; 0x01
 41c:	80 83       	st	Z, r24
                        walker_num[counter+1] = j;
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	9a 81       	ldd	r25, Y+2	; 0x02
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	9c 01       	movw	r18, r24
 426:	22 0f       	add	r18, r18
 428:	33 1f       	adc	r19, r19
 42a:	8b 85       	ldd	r24, Y+11	; 0x0b
 42c:	9c 85       	ldd	r25, Y+12	; 0x0c
 42e:	fc 01       	movw	r30, r24
 430:	e2 0f       	add	r30, r18
 432:	f3 1f       	adc	r31, r19
 434:	8f 81       	ldd	r24, Y+7	; 0x07
 436:	98 85       	ldd	r25, Y+8	; 0x08
 438:	91 83       	std	Z+1, r25	; 0x01
 43a:	80 83       	st	Z, r24
                        walker_num[counter+2] = k;
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	9a 81       	ldd	r25, Y+2	; 0x02
 440:	02 96       	adiw	r24, 0x02	; 2
 442:	9c 01       	movw	r18, r24
 444:	22 0f       	add	r18, r18
 446:	33 1f       	adc	r19, r19
 448:	8b 85       	ldd	r24, Y+11	; 0x0b
 44a:	9c 85       	ldd	r25, Y+12	; 0x0c
 44c:	fc 01       	movw	r30, r24
 44e:	e2 0f       	add	r30, r18
 450:	f3 1f       	adc	r31, r19
 452:	8d 81       	ldd	r24, Y+5	; 0x05
 454:	9e 81       	ldd	r25, Y+6	; 0x06
 456:	91 83       	std	Z+1, r25	; 0x01
 458:	80 83       	st	Z, r24
                        walker_num[counter+3] = l;
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	9a 81       	ldd	r25, Y+2	; 0x02
 45e:	03 96       	adiw	r24, 0x03	; 3
 460:	9c 01       	movw	r18, r24
 462:	22 0f       	add	r18, r18
 464:	33 1f       	adc	r19, r19
 466:	8b 85       	ldd	r24, Y+11	; 0x0b
 468:	9c 85       	ldd	r25, Y+12	; 0x0c
 46a:	fc 01       	movw	r30, r24
 46c:	e2 0f       	add	r30, r18
 46e:	f3 1f       	adc	r31, r19
 470:	8b 81       	ldd	r24, Y+3	; 0x03
 472:	9c 81       	ldd	r25, Y+4	; 0x04
 474:	91 83       	std	Z+1, r25	; 0x01
 476:	80 83       	st	Z, r24
                        counter += 4;
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	9a 81       	ldd	r25, Y+2	; 0x02
 47c:	04 96       	adiw	r24, 0x04	; 4
 47e:	9a 83       	std	Y+2, r25	; 0x02
 480:	89 83       	std	Y+1, r24	; 0x01
    {
        for(j = 0; j < LEG_NUM; j++)
        {
            for(k = 0; k < LEG_NUM; k++)
            {
                for(l = 0; l < LEG_NUM; l ++)
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	9c 81       	ldd	r25, Y+4	; 0x04
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	9c 83       	std	Y+4, r25	; 0x04
 48a:	8b 83       	std	Y+3, r24	; 0x03
 48c:	8b 81       	ldd	r24, Y+3	; 0x03
 48e:	9c 81       	ldd	r25, Y+4	; 0x04
 490:	84 30       	cpi	r24, 0x04	; 4
 492:	91 05       	cpc	r25, r1
 494:	0c f4       	brge	.+2      	; 0x498 <ANN+0x12a>
 496:	85 cf       	rjmp	.-246    	; 0x3a2 <ANN+0x34>
    int counter = 0;
    for(i = 0; i < LEG_NUM; i++)
    {
        for(j = 0; j < LEG_NUM; j++)
        {
            for(k = 0; k < LEG_NUM; k++)
 498:	8d 81       	ldd	r24, Y+5	; 0x05
 49a:	9e 81       	ldd	r25, Y+6	; 0x06
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	9e 83       	std	Y+6, r25	; 0x06
 4a0:	8d 83       	std	Y+5, r24	; 0x05
 4a2:	8d 81       	ldd	r24, Y+5	; 0x05
 4a4:	9e 81       	ldd	r25, Y+6	; 0x06
 4a6:	84 30       	cpi	r24, 0x04	; 4
 4a8:	91 05       	cpc	r25, r1
 4aa:	0c f4       	brge	.+2      	; 0x4ae <ANN+0x140>
 4ac:	77 cf       	rjmp	.-274    	; 0x39c <ANN+0x2e>
{
    int i,j,k,l;
    int counter = 0;
    for(i = 0; i < LEG_NUM; i++)
    {
        for(j = 0; j < LEG_NUM; j++)
 4ae:	8f 81       	ldd	r24, Y+7	; 0x07
 4b0:	98 85       	ldd	r25, Y+8	; 0x08
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	98 87       	std	Y+8, r25	; 0x08
 4b6:	8f 83       	std	Y+7, r24	; 0x07
 4b8:	8f 81       	ldd	r24, Y+7	; 0x07
 4ba:	98 85       	ldd	r25, Y+8	; 0x08
 4bc:	84 30       	cpi	r24, 0x04	; 4
 4be:	91 05       	cpc	r25, r1
 4c0:	0c f4       	brge	.+2      	; 0x4c4 <ANN+0x156>
 4c2:	69 cf       	rjmp	.-302    	; 0x396 <ANN+0x28>
 */
void ANN(int *walker_num[])
{
    int i,j,k,l;
    int counter = 0;
    for(i = 0; i < LEG_NUM; i++)
 4c4:	89 85       	ldd	r24, Y+9	; 0x09
 4c6:	9a 85       	ldd	r25, Y+10	; 0x0a
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	9a 87       	std	Y+10, r25	; 0x0a
 4cc:	89 87       	std	Y+9, r24	; 0x09
 4ce:	89 85       	ldd	r24, Y+9	; 0x09
 4d0:	9a 85       	ldd	r25, Y+10	; 0x0a
 4d2:	84 30       	cpi	r24, 0x04	; 4
 4d4:	91 05       	cpc	r25, r1
 4d6:	0c f4       	brge	.+2      	; 0x4da <ANN+0x16c>
 4d8:	5b cf       	rjmp	.-330    	; 0x390 <ANN+0x22>
                    }
                }
            }
        }
    }
}
 4da:	2c 96       	adiw	r28, 0x0c	; 12
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	de bf       	out	0x3e, r29	; 62
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	cd bf       	out	0x3d, r28	; 61
 4e6:	cf 91       	pop	r28
 4e8:	df 91       	pop	r29
 4ea:	08 95       	ret

000004ec <main>:

int main()
{
 4ec:	df 93       	push	r29
 4ee:	cf 93       	push	r28
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
 4f4:	ce 5c       	subi	r28, 0xCE	; 206
 4f6:	d0 40       	sbci	r29, 0x00	; 0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	f8 94       	cli
 4fc:	de bf       	out	0x3e, r29	; 62
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	cd bf       	out	0x3d, r28	; 61
	 DDRB = 0x3E; //set pins for servos
 502:	e4 e2       	ldi	r30, 0x24	; 36
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	8e e3       	ldi	r24, 0x3E	; 62
 508:	80 83       	st	Z, r24
	 DDRC|=1<<PINC0; // set pins for sensor
 50a:	a7 e2       	ldi	r26, 0x27	; 39
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	e7 e2       	ldi	r30, 0x27	; 39
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	81 60       	ori	r24, 0x01	; 1
 516:	8c 93       	st	X, r24
	 TCCR1B|=1<<CS10;
 518:	a1 e8       	ldi	r26, 0x81	; 129
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	e1 e8       	ldi	r30, 0x81	; 129
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	81 60       	ori	r24, 0x01	; 1
 524:	8c 93       	st	X, r24

	 //interrupt initialisation
	 OCR0A = 0; // range 6-48
 526:	e7 e4       	ldi	r30, 0x47	; 71
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	10 82       	st	Z, r1
	 TCCR0A = 0;
 52c:	e4 e4       	ldi	r30, 0x44	; 68
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	10 82       	st	Z, r1
	 TCCR0B = 0x05;
 532:	e5 e4       	ldi	r30, 0x45	; 69
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	85 e0       	ldi	r24, 0x05	; 5
 538:	80 83       	st	Z, r24
	 TIMSK0 = 0x03;
 53a:	ee e6       	ldi	r30, 0x6E	; 110
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	83 e0       	ldi	r24, 0x03	; 3
 540:	80 83       	st	Z, r24
	 TIFR0 = 0x03;
 542:	e5 e3       	ldi	r30, 0x35	; 53
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	80 83       	st	Z, r24
	 PCICR=0x1;
 54a:	e8 e6       	ldi	r30, 0x68	; 104
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	80 83       	st	Z, r24
	 PCMSK0=0x1;
 552:	eb e6       	ldi	r30, 0x6B	; 107
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	80 83       	st	Z, r24
	 asm("sei");
 55a:	78 94       	sei

	 int first_measurement = 0;
 55c:	1e 86       	std	Y+14, r1	; 0x0e
 55e:	1d 86       	std	Y+13, r1	; 0x0d
	 int second_measurement = 0;
 560:	1c 86       	std	Y+12, r1	; 0x0c
 562:	1b 86       	std	Y+11, r1	; 0x0b
	 int distance = 0;
 564:	1a 86       	std	Y+10, r1	; 0x0a
 566:	19 86       	std	Y+9, r1	; 0x09
	 int best_run = 0;
 568:	18 86       	std	Y+8, r1	; 0x08
 56a:	1f 82       	std	Y+7, r1	; 0x07
	 int run = 0;
 56c:	1e 82       	std	Y+6, r1	; 0x06
 56e:	1d 82       	std	Y+5, r1	; 0x05
	 int round = 0;
 570:	1c 82       	std	Y+4, r1	; 0x04
 572:	1b 82       	std	Y+3, r1	; 0x03
	 int walk_index = 0;
 574:	1a 82       	std	Y+2, r1	; 0x02
 576:	19 82       	std	Y+1, r1	; 0x01
	 int walker_num[96];
	 ANN(&walker_num);
 578:	ce 01       	movw	r24, r28
 57a:	0f 96       	adiw	r24, 0x0f	; 15
 57c:	0e 94 b7 01 	call	0x36e	; 0x36e <ANN>

	 while(1)
	 {
		if(!trained)
 580:	80 91 0c 01 	lds	r24, 0x010C
 584:	90 91 0d 01 	lds	r25, 0x010D
 588:	00 97       	sbiw	r24, 0x00	; 0
 58a:	09 f0       	breq	.+2      	; 0x58e <main+0xa2>
 58c:	9f c0       	rjmp	.+318    	; 0x6cc <main+0x1e0>
		{
			if(round%4 == 0)
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	9c 81       	ldd	r25, Y+4	; 0x04
 592:	83 70       	andi	r24, 0x03	; 3
 594:	90 70       	andi	r25, 0x00	; 0
 596:	00 97       	sbiw	r24, 0x00	; 0
 598:	21 f4       	brne	.+8      	; 0x5a2 <main+0xb6>
			{
				first_measurement = distance_measure();
 59a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <distance_measure>
 59e:	9e 87       	std	Y+14, r25	; 0x0e
 5a0:	8d 87       	std	Y+13, r24	; 0x0d
			}

			walker = walker_num[round];
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	9c 81       	ldd	r25, Y+4	; 0x04
 5a6:	9c 01       	movw	r18, r24
 5a8:	22 0f       	add	r18, r18
 5aa:	33 1f       	adc	r19, r19
 5ac:	ce 01       	movw	r24, r28
 5ae:	01 96       	adiw	r24, 0x01	; 1
 5b0:	82 0f       	add	r24, r18
 5b2:	93 1f       	adc	r25, r19
 5b4:	fc 01       	movw	r30, r24
 5b6:	3e 96       	adiw	r30, 0x0e	; 14
 5b8:	80 81       	ld	r24, Z
 5ba:	91 81       	ldd	r25, Z+1	; 0x01
 5bc:	90 93 09 01 	sts	0x0109, r25
 5c0:	80 93 08 01 	sts	0x0108, r24
			walk();
 5c4:	0e 94 a0 03 	call	0x740	; 0x740 <walk>

			if(round%4 == 0)
 5c8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ca:	9c 81       	ldd	r25, Y+4	; 0x04
 5cc:	83 70       	andi	r24, 0x03	; 3
 5ce:	90 70       	andi	r25, 0x00	; 0
 5d0:	00 97       	sbiw	r24, 0x00	; 0
 5d2:	09 f0       	breq	.+2      	; 0x5d6 <main+0xea>
 5d4:	61 c0       	rjmp	.+194    	; 0x698 <main+0x1ac>
			{
				second_measurement = distance_measure();
 5d6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <distance_measure>
 5da:	9c 87       	std	Y+12, r25	; 0x0c
 5dc:	8b 87       	std	Y+11, r24	; 0x0b
				run = second_measurement - first_measurement;
 5de:	2b 85       	ldd	r18, Y+11	; 0x0b
 5e0:	3c 85       	ldd	r19, Y+12	; 0x0c
 5e2:	8d 85       	ldd	r24, Y+13	; 0x0d
 5e4:	9e 85       	ldd	r25, Y+14	; 0x0e
 5e6:	a9 01       	movw	r20, r18
 5e8:	48 1b       	sub	r20, r24
 5ea:	59 0b       	sbc	r21, r25
 5ec:	ca 01       	movw	r24, r20
 5ee:	9e 83       	std	Y+6, r25	; 0x06
 5f0:	8d 83       	std	Y+5, r24	; 0x05
				if (run > best_run)
 5f2:	2d 81       	ldd	r18, Y+5	; 0x05
 5f4:	3e 81       	ldd	r19, Y+6	; 0x06
 5f6:	8f 81       	ldd	r24, Y+7	; 0x07
 5f8:	98 85       	ldd	r25, Y+8	; 0x08
 5fa:	82 17       	cp	r24, r18
 5fc:	93 07       	cpc	r25, r19
 5fe:	0c f0       	brlt	.+2      	; 0x602 <main+0x116>
 600:	4b c0       	rjmp	.+150    	; 0x698 <main+0x1ac>
				{
					best_run = run;
 602:	8d 81       	ldd	r24, Y+5	; 0x05
 604:	9e 81       	ldd	r25, Y+6	; 0x06
 606:	98 87       	std	Y+8, r25	; 0x08
 608:	8f 83       	std	Y+7, r24	; 0x07
					best_sequence[0] = walker_num[round-3];
 60a:	8b 81       	ldd	r24, Y+3	; 0x03
 60c:	9c 81       	ldd	r25, Y+4	; 0x04
 60e:	03 97       	sbiw	r24, 0x03	; 3
 610:	9c 01       	movw	r18, r24
 612:	22 0f       	add	r18, r18
 614:	33 1f       	adc	r19, r19
 616:	ce 01       	movw	r24, r28
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	82 0f       	add	r24, r18
 61c:	93 1f       	adc	r25, r19
 61e:	fc 01       	movw	r30, r24
 620:	3e 96       	adiw	r30, 0x0e	; 14
 622:	80 81       	ld	r24, Z
 624:	91 81       	ldd	r25, Z+1	; 0x01
 626:	90 93 01 01 	sts	0x0101, r25
 62a:	80 93 00 01 	sts	0x0100, r24
					best_sequence[1] = walker_num[round-2];
 62e:	8b 81       	ldd	r24, Y+3	; 0x03
 630:	9c 81       	ldd	r25, Y+4	; 0x04
 632:	02 97       	sbiw	r24, 0x02	; 2
 634:	9c 01       	movw	r18, r24
 636:	22 0f       	add	r18, r18
 638:	33 1f       	adc	r19, r19
 63a:	ce 01       	movw	r24, r28
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	82 0f       	add	r24, r18
 640:	93 1f       	adc	r25, r19
 642:	fc 01       	movw	r30, r24
 644:	3e 96       	adiw	r30, 0x0e	; 14
 646:	80 81       	ld	r24, Z
 648:	91 81       	ldd	r25, Z+1	; 0x01
 64a:	90 93 03 01 	sts	0x0103, r25
 64e:	80 93 02 01 	sts	0x0102, r24
					best_sequence[2] = walker_num[round-1];
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	9c 81       	ldd	r25, Y+4	; 0x04
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	9c 01       	movw	r18, r24
 65a:	22 0f       	add	r18, r18
 65c:	33 1f       	adc	r19, r19
 65e:	ce 01       	movw	r24, r28
 660:	01 96       	adiw	r24, 0x01	; 1
 662:	82 0f       	add	r24, r18
 664:	93 1f       	adc	r25, r19
 666:	fc 01       	movw	r30, r24
 668:	3e 96       	adiw	r30, 0x0e	; 14
 66a:	80 81       	ld	r24, Z
 66c:	91 81       	ldd	r25, Z+1	; 0x01
 66e:	90 93 05 01 	sts	0x0105, r25
 672:	80 93 04 01 	sts	0x0104, r24
					best_sequence[3] = walker_num[round];
 676:	8b 81       	ldd	r24, Y+3	; 0x03
 678:	9c 81       	ldd	r25, Y+4	; 0x04
 67a:	9c 01       	movw	r18, r24
 67c:	22 0f       	add	r18, r18
 67e:	33 1f       	adc	r19, r19
 680:	ce 01       	movw	r24, r28
 682:	01 96       	adiw	r24, 0x01	; 1
 684:	82 0f       	add	r24, r18
 686:	93 1f       	adc	r25, r19
 688:	fc 01       	movw	r30, r24
 68a:	3e 96       	adiw	r30, 0x0e	; 14
 68c:	80 81       	ld	r24, Z
 68e:	91 81       	ldd	r25, Z+1	; 0x01
 690:	90 93 07 01 	sts	0x0107, r25
 694:	80 93 06 01 	sts	0x0106, r24
				}
			}

			round++;
 698:	8b 81       	ldd	r24, Y+3	; 0x03
 69a:	9c 81       	ldd	r25, Y+4	; 0x04
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	9c 83       	std	Y+4, r25	; 0x04
 6a0:	8b 83       	std	Y+3, r24	; 0x03
			if (round >= 96)
 6a2:	8b 81       	ldd	r24, Y+3	; 0x03
 6a4:	9c 81       	ldd	r25, Y+4	; 0x04
 6a6:	80 36       	cpi	r24, 0x60	; 96
 6a8:	91 05       	cpc	r25, r1
 6aa:	0c f4       	brge	.+2      	; 0x6ae <main+0x1c2>
 6ac:	69 cf       	rjmp	.-302    	; 0x580 <main+0x94>
			{
				sit();
 6ae:	0e 94 d5 03 	call	0x7aa	; 0x7aa <sit>
				delay_ms(5000);
 6b2:	88 e8       	ldi	r24, 0x88	; 136
 6b4:	93 e1       	ldi	r25, 0x13	; 19
 6b6:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
				stand_up();
 6ba:	0e 94 fe 03 	call	0x7fc	; 0x7fc <stand_up>
				trained = 1;
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	90 93 0d 01 	sts	0x010D, r25
 6c6:	80 93 0c 01 	sts	0x010C, r24
 6ca:	5a cf       	rjmp	.-332    	; 0x580 <main+0x94>
			}
		}
		else
		{
			walker = best_sequence[walk_index];
 6cc:	89 81       	ldd	r24, Y+1	; 0x01
 6ce:	9a 81       	ldd	r25, Y+2	; 0x02
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	fc 01       	movw	r30, r24
 6d6:	e0 50       	subi	r30, 0x00	; 0
 6d8:	ff 4f       	sbci	r31, 0xFF	; 255
 6da:	80 81       	ld	r24, Z
 6dc:	91 81       	ldd	r25, Z+1	; 0x01
 6de:	90 93 09 01 	sts	0x0109, r25
 6e2:	80 93 08 01 	sts	0x0108, r24
			walk();
 6e6:	0e 94 a0 03 	call	0x740	; 0x740 <walk>
			walk_index++;
 6ea:	89 81       	ldd	r24, Y+1	; 0x01
 6ec:	9a 81       	ldd	r25, Y+2	; 0x02
 6ee:	01 96       	adiw	r24, 0x01	; 1
 6f0:	9a 83       	std	Y+2, r25	; 0x02
 6f2:	89 83       	std	Y+1, r24	; 0x01
			if(walk_index > 4) walk_index = 0;
 6f4:	89 81       	ldd	r24, Y+1	; 0x01
 6f6:	9a 81       	ldd	r25, Y+2	; 0x02
 6f8:	85 30       	cpi	r24, 0x05	; 5
 6fa:	91 05       	cpc	r25, r1
 6fc:	14 f0       	brlt	.+4      	; 0x702 <main+0x216>
 6fe:	1a 82       	std	Y+2, r1	; 0x02
 700:	19 82       	std	Y+1, r1	; 0x01
			distance = distance_calc();
 702:	0e 94 41 05 	call	0xa82	; 0xa82 <distance_calc>
 706:	9a 87       	std	Y+10, r25	; 0x0a
 708:	89 87       	std	Y+9, r24	; 0x09
			if (distance <= 150)
 70a:	89 85       	ldd	r24, Y+9	; 0x09
 70c:	9a 85       	ldd	r25, Y+10	; 0x0a
 70e:	87 39       	cpi	r24, 0x97	; 151
 710:	91 05       	cpc	r25, r1
 712:	0c f0       	brlt	.+2      	; 0x716 <main+0x22a>
 714:	35 cf       	rjmp	.-406    	; 0x580 <main+0x94>
			{
				distance = distance_calc();
 716:	0e 94 41 05 	call	0xa82	; 0xa82 <distance_calc>
 71a:	9a 87       	std	Y+10, r25	; 0x0a
 71c:	89 87       	std	Y+9, r24	; 0x09
				if (distance < 80)
 71e:	89 85       	ldd	r24, Y+9	; 0x09
 720:	9a 85       	ldd	r25, Y+10	; 0x0a
 722:	80 35       	cpi	r24, 0x50	; 80
 724:	91 05       	cpc	r25, r1
 726:	1c f4       	brge	.+6      	; 0x72e <main+0x242>
				{
					hump();
 728:	0e 94 96 04 	call	0x92c	; 0x92c <hump>
 72c:	29 cf       	rjmp	.-430    	; 0x580 <main+0x94>
				}
				else
				{
					sit();
 72e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <sit>
					delay_ms(4000);
 732:	80 ea       	ldi	r24, 0xA0	; 160
 734:	9f e0       	ldi	r25, 0x0F	; 15
 736:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
					stand_up();
 73a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <stand_up>
 73e:	20 cf       	rjmp	.-448    	; 0x580 <main+0x94>

00000740 <walk>:
 */

#include "movement.h"

void walk()
{
 740:	df 93       	push	r29
 742:	cf 93       	push	r28
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
	if (walker == 0 || walker == 2)
 748:	80 91 08 01 	lds	r24, 0x0108
 74c:	90 91 09 01 	lds	r25, 0x0109
 750:	00 97       	sbiw	r24, 0x00	; 0
 752:	39 f0       	breq	.+14     	; 0x762 <walk+0x22>
 754:	80 91 08 01 	lds	r24, 0x0108
 758:	90 91 09 01 	lds	r25, 0x0109
 75c:	82 30       	cpi	r24, 0x02	; 2
 75e:	91 05       	cpc	r25, r1
 760:	89 f4       	brne	.+34     	; 0x784 <walk+0x44>
	{
		OCR0A = 22;
 762:	e7 e4       	ldi	r30, 0x47	; 71
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	86 e1       	ldi	r24, 0x16	; 22
 768:	80 83       	st	Z, r24
		delay_ms(100);
 76a:	84 e6       	ldi	r24, 0x64	; 100
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
		OCR0A = 30;
 772:	e7 e4       	ldi	r30, 0x47	; 71
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	8e e1       	ldi	r24, 0x1E	; 30
 778:	80 83       	st	Z, r24
		delay_ms(100);
 77a:	84 e6       	ldi	r24, 0x64	; 100
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
 782:	10 c0       	rjmp	.+32     	; 0x7a4 <walk+0x64>
	}
	else
	{
		OCR0A = 30;
 784:	e7 e4       	ldi	r30, 0x47	; 71
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	8e e1       	ldi	r24, 0x1E	; 30
 78a:	80 83       	st	Z, r24
		delay_ms(100);
 78c:	84 e6       	ldi	r24, 0x64	; 100
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
		OCR0A = 22;
 794:	e7 e4       	ldi	r30, 0x47	; 71
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	86 e1       	ldi	r24, 0x16	; 22
 79a:	80 83       	st	Z, r24
		delay_ms(100);
 79c:	84 e6       	ldi	r24, 0x64	; 100
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	}
}
 7a4:	cf 91       	pop	r28
 7a6:	df 91       	pop	r29
 7a8:	08 95       	ret

000007aa <sit>:

void sit() //
{
 7aa:	df 93       	push	r29
 7ac:	cf 93       	push	r28
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62
	 walker = 2;
 7b2:	82 e0       	ldi	r24, 0x02	; 2
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	90 93 09 01 	sts	0x0109, r25
 7ba:	80 93 08 01 	sts	0x0108, r24
	 OCR0A = 16;
 7be:	e7 e4       	ldi	r30, 0x47	; 71
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	80 e1       	ldi	r24, 0x10	; 16
 7c4:	80 83       	st	Z, r24
	 delay_ms(300);
 7c6:	8c e2       	ldi	r24, 0x2C	; 44
 7c8:	91 e0       	ldi	r25, 0x01	; 1
 7ca:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	 walker = 3;
 7ce:	83 e0       	ldi	r24, 0x03	; 3
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	90 93 09 01 	sts	0x0109, r25
 7d6:	80 93 08 01 	sts	0x0108, r24
	 OCR0A = 40;
 7da:	e7 e4       	ldi	r30, 0x47	; 71
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	88 e2       	ldi	r24, 0x28	; 40
 7e0:	80 83       	st	Z, r24
	 delay_ms(300);
 7e2:	8c e2       	ldi	r24, 0x2C	; 44
 7e4:	91 e0       	ldi	r25, 0x01	; 1
 7e6:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	 state = SITTING;
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	90 93 0b 01 	sts	0x010B, r25
 7f2:	80 93 0a 01 	sts	0x010A, r24
}
 7f6:	cf 91       	pop	r28
 7f8:	df 91       	pop	r29
 7fa:	08 95       	ret

000007fc <stand_up>:

void stand_up()
{
 7fc:	df 93       	push	r29
 7fe:	cf 93       	push	r28
 800:	cd b7       	in	r28, 0x3d	; 61
 802:	de b7       	in	r29, 0x3e	; 62
	 walker = 0;
 804:	10 92 09 01 	sts	0x0109, r1
 808:	10 92 08 01 	sts	0x0108, r1
	 OCR0A = 14;
 80c:	e7 e4       	ldi	r30, 0x47	; 71
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	8e e0       	ldi	r24, 0x0E	; 14
 812:	80 83       	st	Z, r24
	 delay_ms(500);
 814:	84 ef       	ldi	r24, 0xF4	; 244
 816:	91 e0       	ldi	r25, 0x01	; 1
 818:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	 walker = 1;
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	90 93 09 01 	sts	0x0109, r25
 824:	80 93 08 01 	sts	0x0108, r24
	 OCR0A = 46;
 828:	e7 e4       	ldi	r30, 0x47	; 71
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	8e e2       	ldi	r24, 0x2E	; 46
 82e:	80 83       	st	Z, r24
	 delay_ms(500);
 830:	84 ef       	ldi	r24, 0xF4	; 244
 832:	91 e0       	ldi	r25, 0x01	; 1
 834:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	 walker = 2;
 838:	82 e0       	ldi	r24, 0x02	; 2
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	90 93 09 01 	sts	0x0109, r25
 840:	80 93 08 01 	sts	0x0108, r24
	 OCR0A = 30;
 844:	e7 e4       	ldi	r30, 0x47	; 71
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	8e e1       	ldi	r24, 0x1E	; 30
 84a:	80 83       	st	Z, r24
	 delay_ms(500);
 84c:	84 ef       	ldi	r24, 0xF4	; 244
 84e:	91 e0       	ldi	r25, 0x01	; 1
 850:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	 walker = 3;
 854:	83 e0       	ldi	r24, 0x03	; 3
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	90 93 09 01 	sts	0x0109, r25
 85c:	80 93 08 01 	sts	0x0108, r24
	 OCR0A = 22;
 860:	e7 e4       	ldi	r30, 0x47	; 71
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	86 e1       	ldi	r24, 0x16	; 22
 866:	80 83       	st	Z, r24
	 delay_ms(500);
 868:	84 ef       	ldi	r24, 0xF4	; 244
 86a:	91 e0       	ldi	r25, 0x01	; 1
 86c:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	 walker = 0;
 870:	10 92 09 01 	sts	0x0109, r1
 874:	10 92 08 01 	sts	0x0108, r1
	 OCR0A = 30;
 878:	e7 e4       	ldi	r30, 0x47	; 71
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	8e e1       	ldi	r24, 0x1E	; 30
 87e:	80 83       	st	Z, r24
	 delay_ms(500);
 880:	84 ef       	ldi	r24, 0xF4	; 244
 882:	91 e0       	ldi	r25, 0x01	; 1
 884:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	 walker = 1;
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	90 93 09 01 	sts	0x0109, r25
 890:	80 93 08 01 	sts	0x0108, r24
	 OCR0A = 22;
 894:	e7 e4       	ldi	r30, 0x47	; 71
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	86 e1       	ldi	r24, 0x16	; 22
 89a:	80 83       	st	Z, r24
	 delay_ms(500);
 89c:	84 ef       	ldi	r24, 0xF4	; 244
 89e:	91 e0       	ldi	r25, 0x01	; 1
 8a0:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	 state = STANDING;
 8a4:	10 92 0b 01 	sts	0x010B, r1
 8a8:	10 92 0a 01 	sts	0x010A, r1

}
 8ac:	cf 91       	pop	r28
 8ae:	df 91       	pop	r29
 8b0:	08 95       	ret

000008b2 <lie_down>:

void lie_down()
{
 8b2:	df 93       	push	r29
 8b4:	cf 93       	push	r28
 8b6:	cd b7       	in	r28, 0x3d	; 61
 8b8:	de b7       	in	r29, 0x3e	; 62
	 walker = 2;
 8ba:	82 e0       	ldi	r24, 0x02	; 2
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	90 93 09 01 	sts	0x0109, r25
 8c2:	80 93 08 01 	sts	0x0108, r24
	 OCR0A = 48;
 8c6:	e7 e4       	ldi	r30, 0x47	; 71
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 e3       	ldi	r24, 0x30	; 48
 8cc:	80 83       	st	Z, r24
	 delay_ms(500);
 8ce:	84 ef       	ldi	r24, 0xF4	; 244
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	 walker = 3;
 8d6:	83 e0       	ldi	r24, 0x03	; 3
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	90 93 09 01 	sts	0x0109, r25
 8de:	80 93 08 01 	sts	0x0108, r24
	 OCR0A =14;
 8e2:	e7 e4       	ldi	r30, 0x47	; 71
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	8e e0       	ldi	r24, 0x0E	; 14
 8e8:	80 83       	st	Z, r24
	 delay_ms(500);
 8ea:	84 ef       	ldi	r24, 0xF4	; 244
 8ec:	91 e0       	ldi	r25, 0x01	; 1
 8ee:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>

	 walker = 1;
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	90 93 09 01 	sts	0x0109, r25
 8fa:	80 93 08 01 	sts	0x0108, r24
	 OCR0A = 48;
 8fe:	e7 e4       	ldi	r30, 0x47	; 71
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	80 e3       	ldi	r24, 0x30	; 48
 904:	80 83       	st	Z, r24
	 delay_ms(500);
 906:	84 ef       	ldi	r24, 0xF4	; 244
 908:	91 e0       	ldi	r25, 0x01	; 1
 90a:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	 walker = 0;
 90e:	10 92 09 01 	sts	0x0109, r1
 912:	10 92 08 01 	sts	0x0108, r1
	 OCR0A =14;
 916:	e7 e4       	ldi	r30, 0x47	; 71
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	8e e0       	ldi	r24, 0x0E	; 14
 91c:	80 83       	st	Z, r24
	 delay_ms(500);
 91e:	84 ef       	ldi	r24, 0xF4	; 244
 920:	91 e0       	ldi	r25, 0x01	; 1
 922:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
}
 926:	cf 91       	pop	r28
 928:	df 91       	pop	r29
 92a:	08 95       	ret

0000092c <hump>:

void hump()
{
 92c:	df 93       	push	r29
 92e:	cf 93       	push	r28
 930:	00 d0       	rcall	.+0      	; 0x932 <hump+0x6>
 932:	cd b7       	in	r28, 0x3d	; 61
 934:	de b7       	in	r29, 0x3e	; 62
	 lie_down();
 936:	0e 94 59 04 	call	0x8b2	; 0x8b2 <lie_down>
	 for(unsigned int i = 0; i < 30; i++)
 93a:	1a 82       	std	Y+2, r1	; 0x02
 93c:	19 82       	std	Y+1, r1	; 0x01
 93e:	31 c0       	rjmp	.+98     	; 0x9a2 <hump+0x76>
	 {
		walker = 2;
 940:	82 e0       	ldi	r24, 0x02	; 2
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	90 93 09 01 	sts	0x0109, r25
 948:	80 93 08 01 	sts	0x0108, r24
		OCR0A = 44;
 94c:	e7 e4       	ldi	r30, 0x47	; 71
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	8c e2       	ldi	r24, 0x2C	; 44
 952:	80 83       	st	Z, r24
		delay_ms(200);
 954:	88 ec       	ldi	r24, 0xC8	; 200
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
		OCR0A = 48;
 95c:	e7 e4       	ldi	r30, 0x47	; 71
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	80 e3       	ldi	r24, 0x30	; 48
 962:	80 83       	st	Z, r24
		delay_ms(200);
 964:	88 ec       	ldi	r24, 0xC8	; 200
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
		walker = 3;
 96c:	83 e0       	ldi	r24, 0x03	; 3
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	90 93 09 01 	sts	0x0109, r25
 974:	80 93 08 01 	sts	0x0108, r24
		OCR0A =18;
 978:	e7 e4       	ldi	r30, 0x47	; 71
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	82 e1       	ldi	r24, 0x12	; 18
 97e:	80 83       	st	Z, r24
		delay_ms(200);
 980:	88 ec       	ldi	r24, 0xC8	; 200
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
		OCR0A = 14;
 988:	e7 e4       	ldi	r30, 0x47	; 71
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	8e e0       	ldi	r24, 0x0E	; 14
 98e:	80 83       	st	Z, r24
		delay_ms(200);
 990:	88 ec       	ldi	r24, 0xC8	; 200
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
}

void hump()
{
	 lie_down();
	 for(unsigned int i = 0; i < 30; i++)
 998:	89 81       	ldd	r24, Y+1	; 0x01
 99a:	9a 81       	ldd	r25, Y+2	; 0x02
 99c:	01 96       	adiw	r24, 0x01	; 1
 99e:	9a 83       	std	Y+2, r25	; 0x02
 9a0:	89 83       	std	Y+1, r24	; 0x01
 9a2:	89 81       	ldd	r24, Y+1	; 0x01
 9a4:	9a 81       	ldd	r25, Y+2	; 0x02
 9a6:	8e 31       	cpi	r24, 0x1E	; 30
 9a8:	91 05       	cpc	r25, r1
 9aa:	50 f2       	brcs	.-108    	; 0x940 <hump+0x14>
		OCR0A =18;
		delay_ms(200);
		OCR0A = 14;
		delay_ms(200);
	 }
	 stand_up();
 9ac:	0e 94 fe 03 	call	0x7fc	; 0x7fc <stand_up>
}
 9b0:	0f 90       	pop	r0
 9b2:	0f 90       	pop	r0
 9b4:	cf 91       	pop	r28
 9b6:	df 91       	pop	r29
 9b8:	08 95       	ret

000009ba <distance_measure>:
 */

#include "sensor.h"

int distance_measure()
{
 9ba:	df 93       	push	r29
 9bc:	cf 93       	push	r28
 9be:	00 d0       	rcall	.+0      	; 0x9c0 <distance_measure+0x6>
 9c0:	00 d0       	rcall	.+0      	; 0x9c2 <distance_measure+0x8>
 9c2:	cd b7       	in	r28, 0x3d	; 61
 9c4:	de b7       	in	r29, 0x3e	; 62
	int dist = 0;
 9c6:	1c 82       	std	Y+4, r1	; 0x04
 9c8:	1b 82       	std	Y+3, r1	; 0x03
	int limit = 0;
 9ca:	1a 82       	std	Y+2, r1	; 0x02
 9cc:	19 82       	std	Y+1, r1	; 0x01

	TCNT1=0;
 9ce:	e4 e8       	ldi	r30, 0x84	; 132
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	11 82       	std	Z+1, r1	; 0x01
 9d4:	10 82       	st	Z, r1
	PORTC|=1<<PINC0;
 9d6:	a8 e2       	ldi	r26, 0x28	; 40
 9d8:	b0 e0       	ldi	r27, 0x00	; 0
 9da:	e8 e2       	ldi	r30, 0x28	; 40
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	80 81       	ld	r24, Z
 9e0:	81 60       	ori	r24, 0x01	; 1
 9e2:	8c 93       	st	X, r24
	while(TCNT1<100);
 9e4:	e4 e8       	ldi	r30, 0x84	; 132
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	80 81       	ld	r24, Z
 9ea:	91 81       	ldd	r25, Z+1	; 0x01
 9ec:	84 36       	cpi	r24, 0x64	; 100
 9ee:	91 05       	cpc	r25, r1
 9f0:	c8 f3       	brcs	.-14     	; 0x9e4 <distance_measure+0x2a>
	PORTC&=~(1<<PINC0);
 9f2:	a8 e2       	ldi	r26, 0x28	; 40
 9f4:	b0 e0       	ldi	r27, 0x00	; 0
 9f6:	e8 e2       	ldi	r30, 0x28	; 40
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	80 81       	ld	r24, Z
 9fc:	8e 7f       	andi	r24, 0xFE	; 254
 9fe:	8c 93       	st	X, r24

	TCNT1=0;
 a00:	e4 e8       	ldi	r30, 0x84	; 132
 a02:	f0 e0       	ldi	r31, 0x00	; 0
 a04:	11 82       	std	Z+1, r1	; 0x01
 a06:	10 82       	st	Z, r1
	while ( !(PINC & (1 << PINC1)) && (TCNT1 < 30000));  // checking if echo has become high  and not exceeding the time for max range i.e 5 m
 a08:	e6 e2       	ldi	r30, 0x26	; 38
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	80 81       	ld	r24, Z
 a0e:	88 2f       	mov	r24, r24
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	82 70       	andi	r24, 0x02	; 2
 a14:	90 70       	andi	r25, 0x00	; 0
 a16:	00 97       	sbiw	r24, 0x00	; 0
 a18:	41 f4       	brne	.+16     	; 0xa2a <distance_measure+0x70>
 a1a:	e4 e8       	ldi	r30, 0x84	; 132
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	80 81       	ld	r24, Z
 a20:	91 81       	ldd	r25, Z+1	; 0x01
 a22:	25 e7       	ldi	r18, 0x75	; 117
 a24:	80 33       	cpi	r24, 0x30	; 48
 a26:	92 07       	cpc	r25, r18
 a28:	78 f3       	brcs	.-34     	; 0xa08 <distance_measure+0x4e>
	limit = TCNT1;
 a2a:	e4 e8       	ldi	r30, 0x84	; 132
 a2c:	f0 e0       	ldi	r31, 0x00	; 0
 a2e:	80 81       	ld	r24, Z
 a30:	91 81       	ldd	r25, Z+1	; 0x01
 a32:	9a 83       	std	Y+2, r25	; 0x02
 a34:	89 83       	std	Y+1, r24	; 0x01

	if(limit < 300000)
	{
		TCNT1=0;
 a36:	e4 e8       	ldi	r30, 0x84	; 132
 a38:	f0 e0       	ldi	r31, 0x00	; 0
 a3a:	11 82       	std	Z+1, r1	; 0x01
 a3c:	10 82       	st	Z, r1
		while(PINC&(1<<PINC1));    // waiting until the echo become low again
 a3e:	e6 e2       	ldi	r30, 0x26	; 38
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	80 81       	ld	r24, Z
 a44:	88 2f       	mov	r24, r24
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	82 70       	andi	r24, 0x02	; 2
 a4a:	90 70       	andi	r25, 0x00	; 0
 a4c:	00 97       	sbiw	r24, 0x00	; 0
 a4e:	b9 f7       	brne	.-18     	; 0xa3e <distance_measure+0x84>
		dist =TCNT1/58;
 a50:	e4 e8       	ldi	r30, 0x84	; 132
 a52:	f0 e0       	ldi	r31, 0x00	; 0
 a54:	80 81       	ld	r24, Z
 a56:	91 81       	ldd	r25, Z+1	; 0x01
 a58:	2a e3       	ldi	r18, 0x3A	; 58
 a5a:	30 e0       	ldi	r19, 0x00	; 0
 a5c:	b9 01       	movw	r22, r18
 a5e:	0e 94 92 05 	call	0xb24	; 0xb24 <__udivmodhi4>
 a62:	cb 01       	movw	r24, r22
 a64:	9c 83       	std	Y+4, r25	; 0x04
 a66:	8b 83       	std	Y+3, r24	; 0x03
	}
	delay_ms(20);
 a68:	84 e1       	ldi	r24, 0x14	; 20
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	return dist;
 a70:	8b 81       	ldd	r24, Y+3	; 0x03
 a72:	9c 81       	ldd	r25, Y+4	; 0x04

}
 a74:	0f 90       	pop	r0
 a76:	0f 90       	pop	r0
 a78:	0f 90       	pop	r0
 a7a:	0f 90       	pop	r0
 a7c:	cf 91       	pop	r28
 a7e:	df 91       	pop	r29
 a80:	08 95       	ret

00000a82 <distance_calc>:

int distance_calc()
{
 a82:	df 93       	push	r29
 a84:	cf 93       	push	r28
 a86:	00 d0       	rcall	.+0      	; 0xa88 <distance_calc+0x6>
 a88:	00 d0       	rcall	.+0      	; 0xa8a <distance_calc+0x8>
 a8a:	00 d0       	rcall	.+0      	; 0xa8c <distance_calc+0xa>
 a8c:	cd b7       	in	r28, 0x3d	; 61
 a8e:	de b7       	in	r29, 0x3e	; 62
	int sum = 0;
 a90:	1e 82       	std	Y+6, r1	; 0x06
 a92:	1d 82       	std	Y+5, r1	; 0x05
	int dist = 0;
 a94:	1c 82       	std	Y+4, r1	; 0x04
 a96:	1b 82       	std	Y+3, r1	; 0x03
	for (int i = 0; i < SAMPLE_SIZE; i++)
 a98:	1a 82       	std	Y+2, r1	; 0x02
 a9a:	19 82       	std	Y+1, r1	; 0x01
 a9c:	14 c0       	rjmp	.+40     	; 0xac6 <distance_calc+0x44>
	{
		dist = distance_measure();
 a9e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <distance_measure>
 aa2:	9c 83       	std	Y+4, r25	; 0x04
 aa4:	8b 83       	std	Y+3, r24	; 0x03
		if(sum < dist)
 aa6:	2d 81       	ldd	r18, Y+5	; 0x05
 aa8:	3e 81       	ldd	r19, Y+6	; 0x06
 aaa:	8b 81       	ldd	r24, Y+3	; 0x03
 aac:	9c 81       	ldd	r25, Y+4	; 0x04
 aae:	28 17       	cp	r18, r24
 ab0:	39 07       	cpc	r19, r25
 ab2:	24 f4       	brge	.+8      	; 0xabc <distance_calc+0x3a>
		{
			sum = dist;
 ab4:	8b 81       	ldd	r24, Y+3	; 0x03
 ab6:	9c 81       	ldd	r25, Y+4	; 0x04
 ab8:	9e 83       	std	Y+6, r25	; 0x06
 aba:	8d 83       	std	Y+5, r24	; 0x05

int distance_calc()
{
	int sum = 0;
	int dist = 0;
	for (int i = 0; i < SAMPLE_SIZE; i++)
 abc:	89 81       	ldd	r24, Y+1	; 0x01
 abe:	9a 81       	ldd	r25, Y+2	; 0x02
 ac0:	01 96       	adiw	r24, 0x01	; 1
 ac2:	9a 83       	std	Y+2, r25	; 0x02
 ac4:	89 83       	std	Y+1, r24	; 0x01
 ac6:	89 81       	ldd	r24, Y+1	; 0x01
 ac8:	9a 81       	ldd	r25, Y+2	; 0x02
 aca:	85 30       	cpi	r24, 0x05	; 5
 acc:	91 05       	cpc	r25, r1
 ace:	3c f3       	brlt	.-50     	; 0xa9e <distance_calc+0x1c>
		{
			sum = dist;
		}
	}

	return sum;
 ad0:	8d 81       	ldd	r24, Y+5	; 0x05
 ad2:	9e 81       	ldd	r25, Y+6	; 0x06
}
 ad4:	26 96       	adiw	r28, 0x06	; 6
 ad6:	0f b6       	in	r0, 0x3f	; 63
 ad8:	f8 94       	cli
 ada:	de bf       	out	0x3e, r29	; 62
 adc:	0f be       	out	0x3f, r0	; 63
 ade:	cd bf       	out	0x3d, r28	; 61
 ae0:	cf 91       	pop	r28
 ae2:	df 91       	pop	r29
 ae4:	08 95       	ret

00000ae6 <__mulsi3>:
 ae6:	62 9f       	mul	r22, r18
 ae8:	d0 01       	movw	r26, r0
 aea:	73 9f       	mul	r23, r19
 aec:	f0 01       	movw	r30, r0
 aee:	82 9f       	mul	r24, r18
 af0:	e0 0d       	add	r30, r0
 af2:	f1 1d       	adc	r31, r1
 af4:	64 9f       	mul	r22, r20
 af6:	e0 0d       	add	r30, r0
 af8:	f1 1d       	adc	r31, r1
 afa:	92 9f       	mul	r25, r18
 afc:	f0 0d       	add	r31, r0
 afe:	83 9f       	mul	r24, r19
 b00:	f0 0d       	add	r31, r0
 b02:	74 9f       	mul	r23, r20
 b04:	f0 0d       	add	r31, r0
 b06:	65 9f       	mul	r22, r21
 b08:	f0 0d       	add	r31, r0
 b0a:	99 27       	eor	r25, r25
 b0c:	72 9f       	mul	r23, r18
 b0e:	b0 0d       	add	r27, r0
 b10:	e1 1d       	adc	r30, r1
 b12:	f9 1f       	adc	r31, r25
 b14:	63 9f       	mul	r22, r19
 b16:	b0 0d       	add	r27, r0
 b18:	e1 1d       	adc	r30, r1
 b1a:	f9 1f       	adc	r31, r25
 b1c:	bd 01       	movw	r22, r26
 b1e:	cf 01       	movw	r24, r30
 b20:	11 24       	eor	r1, r1
 b22:	08 95       	ret

00000b24 <__udivmodhi4>:
 b24:	aa 1b       	sub	r26, r26
 b26:	bb 1b       	sub	r27, r27
 b28:	51 e1       	ldi	r21, 0x11	; 17
 b2a:	07 c0       	rjmp	.+14     	; 0xb3a <__udivmodhi4_ep>

00000b2c <__udivmodhi4_loop>:
 b2c:	aa 1f       	adc	r26, r26
 b2e:	bb 1f       	adc	r27, r27
 b30:	a6 17       	cp	r26, r22
 b32:	b7 07       	cpc	r27, r23
 b34:	10 f0       	brcs	.+4      	; 0xb3a <__udivmodhi4_ep>
 b36:	a6 1b       	sub	r26, r22
 b38:	b7 0b       	sbc	r27, r23

00000b3a <__udivmodhi4_ep>:
 b3a:	88 1f       	adc	r24, r24
 b3c:	99 1f       	adc	r25, r25
 b3e:	5a 95       	dec	r21
 b40:	a9 f7       	brne	.-22     	; 0xb2c <__udivmodhi4_loop>
 b42:	80 95       	com	r24
 b44:	90 95       	com	r25
 b46:	bc 01       	movw	r22, r24
 b48:	cd 01       	movw	r24, r26
 b4a:	08 95       	ret

00000b4c <_exit>:
 b4c:	f8 94       	cli

00000b4e <__stop_program>:
 b4e:	ff cf       	rjmp	.-2      	; 0xb4e <__stop_program>
