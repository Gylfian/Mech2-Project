
Mech2-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000004ec  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006d3  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <print.h>

int main ( )
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	0f 92       	push	r0
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	DDRB=0x20 ;
  8a:	e4 e2       	ldi	r30, 0x24	; 36
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 e2       	ldi	r24, 0x20	; 32
  90:	80 83       	st	Z, r24
	USARTInit();
  92:	0e 94 53 00 	call	0xa6	; 0xa6 <USARTInit>
	char c = 85;
  96:	85 e5       	ldi	r24, 0x55	; 85
  98:	89 83       	std	Y+1, r24	; 0x01
	while ( 1 )
	{

		uart_putchar(c);
  9a:	89 81       	ldd	r24, Y+1	; 0x01
  9c:	88 2f       	mov	r24, r24
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_putchar>
  a4:	fa cf       	rjmp	.-12     	; 0x9a <main+0x1a>

000000a6 <USARTInit>:

#include<print.h>
#include <avr/io.h>

void USARTInit ( )
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	UBRR0 = 103; // s e t baudrate ( here 9600 f o r arduino uno R3) 1/9600 = 104 microsec
  ae:	e4 ec       	ldi	r30, 0xC4	; 196
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	91 83       	std	Z+1, r25	; 0x01
  b8:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ00) |(1<<UCSZ01) ; //No parity , 8 b i t s , 1 stop b i t
  ba:	a2 ec       	ldi	r26, 0xC2	; 194
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e2 ec       	ldi	r30, 0xC2	; 194
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	86 60       	ori	r24, 0x06	; 6
  c6:	8c 93       	st	X, r24
	UCSR0B|=(1<<RXEN0) |(1<<TXEN0) ; // Enable The r e c e i v e r and t r a n s m i t t e r
  c8:	a1 ec       	ldi	r26, 0xC1	; 193
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	8c 93       	st	X, r24
}
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <uart_putchar>:

int uart_putchar (char c)
{
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	0f 92       	push	r0
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	89 83       	std	Y+1, r24	; 0x01
	while ( ! ( UCSR0A & (1<<UDRE0) ) )
  e8:	e0 ec       	ldi	r30, 0xC0	; 192
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	80 72       	andi	r24, 0x20	; 32
  f4:	90 70       	andi	r25, 0x00	; 0
  f6:	00 97       	sbiw	r24, 0x00	; 0
  f8:	b9 f3       	breq	.-18     	; 0xe8 <uart_putchar+0xc>
		; // wait f o r ready
	UDR0 = c ; // send the char
  fa:	e6 ec       	ldi	r30, 0xC6	; 198
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	80 83       	st	Z, r24
	return 0 ;
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
}
 106:	0f 90       	pop	r0
 108:	cf 91       	pop	r28
 10a:	df 91       	pop	r29
 10c:	08 95       	ret

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
